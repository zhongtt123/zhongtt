<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


	<!--导入外部的jdbc.properties文件-->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!--配置c3p0数据源-ComboPooledDataSource-->
	<!--${键}:引用属性文件中指定键的值-->
	<bean id="c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!--驱动-->
		<property name="driverClass" value="${driver_class}"/>
		<!--url-->
		<property name="jdbcUrl" value="${jdbc_url}"/>
		<!--用户名-->
		<property name="user" value="${user_name}"/>
		<!--密码-->
		<property name="password" value="${user_pwd}"/>
	</bean>

	<!--spring集成mybatis-->
	<!--1 让spring创建mybatis的数据库对象sqlsessionfacotry-->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--注入数据库的相关信息，在这里称之为数据源-->
		<property name="dataSource" ref="c3p0"/>
		<!--方式一：直接注入所有映射文件的路径，mybatis-config.xml不需要了-->
		<property name="mapperLocations" value="classpath:mappers/*.xml"/>
		<!--方式二：指定mybatis核心配置文件mybatis-config.xml的路径-->
		<!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
	</bean>


	<!--2 让spring创建mybatis中dao接口的实现类(代理类)-->
	<!--MapperScannerConfigurer用来扫描指定的包，将包中的所有接口都生成实现类，
	原理：aop、动态代理-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--basePackage指定要扫描的包-->
		<property name="basePackage" value="com.ck.dao"/>
	</bean>
</beans>